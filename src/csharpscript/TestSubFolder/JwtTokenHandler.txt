public class JwtTokenHandler
{
    private const string AUTHORIZATION = "Authorization";
    private const string BEARER = "Bearer";
    private const string SECRET = "some long secret";

    public static string generateJWTToken(Dictionary<string, object> payload)
    {
        string token = string.Empty;
        try
        {
            IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
            IJsonSerializer serializer = new JsonNetSerializer();
            IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
            IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);

            token = encoder.Encode(payload, SECRET);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{ex}");
        }
        return token;
    }

    public static string decodeJWTToken(string token, string secret)
    {
        try
        {
            IJsonSerializer serializer = new JsonNetSerializer();
            IDateTimeProvider provider = new UtcDateTimeProvider();
            IJwtValidator validator = new JwtValidator(serializer, provider);
            IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
            IJwtAlgorithm algorithm = new HMACSHA256Algorithm(); // symmetric
            IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm);

            var json = decoder.Decode(token, secret, verify: true);
            return json;
        }
        catch (TokenExpiredException)
        {
            Console.WriteLine($"Token has expired {secret}");
            return null;
        }
        catch (SignatureVerificationException svex)
        {
            Console.WriteLine($"Token has invalid signature: {svex}");
            return null;
        }
    }
}
